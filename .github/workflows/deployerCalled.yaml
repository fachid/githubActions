name: deployer

on:
  workflow_dispatch:
  workflow_call:
    inputs:
      Environment:
        required: true
        type: string
    secrets:
      VPC:
        required: false
      AWS_ACCOUNT:
        required: false
      OIDC_ROLE:
        required: false
      AWS_REGION:
        required: false


jobs:
  build:
    name: deploy workflow
    environment: ${{ github.event.inputs.Environment }}  
    runs-on: ubuntu-latest
    steps:

    - name: Checkout
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Setup Environment Variables
      id: variables
      run: |

        # set short commit ID
        #echo "SHORT_COMMIT_ID=${GITHUB_SHA::8}" >> $GITHUB_ENV 
        echo "SHORT_COMMIT_ID=`git rev-parse --short HEAD`" >> $GITHUB_ENV 

        # set the application name
        appName=`yq e .ApplicationData.Properties.Name enterpriseHLT-stack.yaml`        
        if [ $appName == "null" ]; then
          echo "No application name defined!"
          exit 1
        fi
        echo "APP_NAME=$appName" >> $GITHUB_ENV 

        # Set Environment by Branch Name (sbx is all outside of protected branches)
        # This also sets the role to assume from secrets based on branch

        echo "CONTINUE_ON_ERROR=${{ false }}" >> $GITHUB_ENV # break the build if vulnerabilities found
        
        if [ ${{ github.ref_name }} == "main" ]; then
          echo "ENVIRONMENT=test" >> $GITHUB_ENV
          # echo "CONTINUE_ON_ERROR=${{ false }}" >> $GITHUB_ENV # break the build in case of vulnerabilities found for test
        elif [ ${{ github.ref_name }} == "dev" ]; then
          echo "ENVIRONMENT=dev" >> $GITHUB_ENV
        else
          lowercase=`echo sbx-${{ github.ref_name }} | tr '[:upper:]' '[:lower:]'`  # conver to lowercase
          echo "ENVIRONMENT=$lowercase" >> $GITHUB_ENV
          fi


    # check repo structure
    - name: Check repository.
      run: |
        echo "check repo"



    # configure credentials with OIDC
    - name: configure aws credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        role-to-assume: arn:aws:iam::${{ github.event.inputs.AWS_ACCOUNT }}:role/${{ github.event.inputs.OIDC_ROLE }}
        role-session-name: ${{ env.ENVIRONMENT }}-${{ env.APP_NAME }}
        aws-region: ${{ github.event.inputs.AWS_REGION }}





      # # Runs a set of commands using the runners shell
      # - name: Run a multi-line script
      #   run: |
      #     echo "usernam = ${{ inputs.username }}"
      #     echo "called workflow test, and deploy your project."

      #     echo ${{ secrets.VPC }}
      #     echo ${{ secrets.VPC }} | sed -e 's/\(.\)/\1 /g'

      #     echo "secret_name=VPC" >> $GITHUB_ENV


      # # Runs a set of commands using the runners shell
      # - name: Run a multi-line script
      #   # env: 
      #   #   secret_name: VPC
      #   run: |

      #     params=`yq e '.Parameters | keys | .[]' enterpriseHLT-stack.yaml`
      #     echo $params
      #     for I in $params:
      #     do
      #       echo "parameter -> $I"
      #       p=`echo "$I" | tr -dc '[:alnum:]\n\r' | tr '[:upper:]' '[:lower:]'`
      #     done
          
      #     echo "--------------"
      #     echo ${{ secrets.VPC }}
      #     echo "aa=VPC" >> $GITHUB_ENV
      #     echo $aa
      #     echo "${{ env.aa }}"

      #     echo "secrets.$secret_name = ${{ secrets[env.secret_name] }} " | sed -e 's/\(.\)/\1 /g'
      #     echo "secrets.$secret_name = ${{ secrets[env.aa] }} " | sed -e 's/\(.\)/\1 /g'

